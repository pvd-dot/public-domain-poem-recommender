"""Module for recommending poetry based on user queries."""
import prompts


class Recommender:
    """Class for recommending poems based on user requests using RAG and LLMs.

    The recommendation process consists of a candidate generation step and a
    selection step. Candidates are generated by performing a nearest neighbor
    search on poem embeddings stored in a FAISS index, using an embedding of
    the user's request text as the query vector (see vector_searcher.py).
    The candidates are then passed to the LLM in the prompt (a technique
    known as Retrieval-Augmented Generation, or RAG). The prompt asks the LLM
    to select the poem most suitable for the user along with an explanation.
    Examples of desired query-candidate/selection-explanation pairs are
    included in the prompt (see prompts.py)."""

    def __init__(self, vector_searcher, chat):
        self.vector_searcher = vector_searcher
        self.chat = chat
        self.chat.set_system_message(prompts.INITIAL_PROMPT)

    def build_recommendation_result(self, poem_id, explanation):
        poem = self.vector_searcher.convert_to_poem(poem_id)
        poem_text = f"{poem.title}\n" + f"By {poem.author}\n\n" + f"{poem.text}"
        return explanation, poem_text

    def ask(self, user_query):
        if user_query == "":
            return "Please enter a query.", ""
        poem_results = self.vector_searcher.search(user_query, limit=10)
        self.chat.add_assistant_message(
            prompts.build_response_prompt(user_query, poem_results)
        )
        response = self.chat.respond(user_query)
        self.chat.reset_messages()
        try:
            explanation, id_ = prompts.extract_response(response)
            return self.build_recommendation_result(id_, explanation)
        except ValueError:
            return "Sorry, please try again with a different query.", ""
